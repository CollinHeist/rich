import bisect
import itertools
from operator import itemgetter
import subprocess
from typing import List, Tuple
import sys

from rich.progress import Progress

from wcwidth import wcwidth


progress = Progress()


def make_widths_lists() -> Tuple[List[int], List[int], List[int]]:
    starts: List[int] = []
    ends: List[int] = []
    widths: List[int] = []

    make_table_task = progress.add_task("Calculating table...")

    cp_widths = (
        (codepoint, wcwidth(chr(codepoint)))
        for codepoint in range(0, sys.maxunicode + 1)
    )

    progress.update(make_table_task, total=sys.maxunicode)

    for width, codepoints in itertools.groupby(cp_widths, key=itemgetter(1)):
        cp_list = list(codepoints)
        progress.advance(make_table_task, len(cp_list))
        if width == 1:
            continue
        starts.append(cp_list[0][0])
        ends.append(cp_list[-1][0])
        widths.append(width)
    return starts, ends, widths


def get_cell_size(
    starts: List[int],
    ends: List[int],
    widths: List[int],
    codepoint: int,
) -> int:
    """Get the cell size of a character.

    Args:
        codepoint (int): Codepoint of a character.

    Returns:
        int: Number of cells (0, 1 or 2) occupied by that character.
    """

    idx = bisect.bisect_right(starts, codepoint)
    if codepoint <= ends[idx - 1]:
        return widths[idx - 1]
    else:
        return 1


def test(starts: List[int], ends: List[int], widths: List[int]) -> None:
    for codepoint in progress.track(
        range(0, sys.maxunicode + 1), description="Testing..."
    ):
        character = chr(codepoint)
        width1 = get_cell_size(starts, ends, widths, codepoint)
        width2 = wcwidth(character)
        if width1 != width2:
            print(f"{width1} != {width2}")
            break


def run() -> None:
    with progress:
        starts, ends, widths = make_widths_lists()
        test(starts, ends, widths)
    table_file = f"""# Auto generated by make_terminal_widths.py

CELL_WIDTH_RANGE_STARTS = {starts!r}


CELL_WIDTH_RANGE_ENDS = {ends!r}


CELL_WIDTHS = {widths!r}
"""
    with open("../rich/_cell_widths.py", "wt") as fh:
        fh.write(table_file)

    subprocess.run("black ../rich/_cell_widths.py", shell=True)


if __name__ == "__main__":
    run()
